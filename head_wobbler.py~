#!/usr/bin/env python

import argparse
import random

import rospy
import baxter_interface

from baxter_interface import CHECK_VERSION


class Wobbler(object):

    def __init__(self):
        """
        'Wobbles' the head
        """
        self._done = False
        self._head = baxter_interface.Head()

        # verify robot is enabled
        print("Getting robot state... ")
        self._rs = baxter_interface.RobotEnable(CHECK_VERSION)
        self._init_state = self._rs.state().enabled
        print("Enabling robot... ")
        self._rs.enable()
        print("Running. Ctrl-c to quit")

    def clean_shutdown(self):
        
        print("\nExiting example...")
        if self._done:
            self.set_neutral()
        if not self._init_state and self._rs.state().enabled:
            print("Disabling robot...")
            self._rs.disable()

    def set_neutral(self):
        """
        Sets the head back into a neutral pose
        """
        self._head.set_pan(0.0)

    def wobble(self):
        self.set_neutral()
        """
        Performs the wobbling
        """
        self._head.command_nod()
        command_rate = rospy.Rate(1)
        control_rate = rospy.Rate(100)
        start = rospy.get_time()
        while not rospy.is_shutdown() and (rospy.get_time() - start < 10.0):
            angle = random.uniform(-1.5, 1.5)
            while (not rospy.is_shutdown() and
                   not (abs(self._head.pan() - angle) <=
                       baxter_interface.HEAD_PAN_ANGLE_TOLERANCE)):
                self._head.set_pan(angle, speed=30, timeout=0)
                control_rate.sleep()
            command_rate.sleep()

        self._done = True
        rospy.signal_shutdown("Example finished.")


class Baxter(object):

    def __init__(self):
	self._head = baxter_interface.Head()

	self._done = False

 	 # verify robot is enabled
        
        self._rs = baxter_interface.RobotEnable(CHECK_VERSION)
        self._init_state = self._rs.state().enabled
        self._rs.enable()

        print("Running. Ctrl-c to quit")

    def on_running():
	
    def on_shutdown():
    	# Exits cleanly by moving head to neutral position and maintaining start state

	if self._done:
            self.set_head_neutral()

        if not self._init_state and self._rs.state().enabled:
            self._rs.disable()

    def set_head_neutral(self):
        # Sets the head back into a neutral pose
       
        self._head.set_pan(0.0)


	
def main():
    # Read the arguments 
    arg_fmt = argparse.RawDescriptionHelpFormatter
    parser = argparse.ArgumentParser(formatter_class=arg_fmt,
                                     description=main.__doc__)
    parser.parse_args(rospy.myargv()[1:])

    # Initialize the node
    rospy.init_node("rsdk_baxter_trustor")

    #wobbler = Wobbler()
   
    # Create an instance of Baxter
    baxter = Baxter()
	
    rospy.on_shutdown(baxter.on_shutdown)
   
    #wobbler.wobble()
    # Starts Baxter's behavior 
    baxter.on_running()
    

if __name__ == '__main__':
    main()
